name: lens
version: 4.15.4
id: lens-4.15.4-K5DiWacY4288B1TOQZ5ZDi
key: lens-4.15.4-K5DiWacY4288B1TOQZ5ZDi
license: BSD2
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
author: Edward A. Kmett
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.Coerce
    Control.Lens.Internal.Context Control.Lens.Internal.CTypes
    Control.Lens.Internal.Deque Control.Lens.Internal.Exception
    Control.Lens.Internal.FieldTH Control.Lens.Internal.PrismTH
    Control.Lens.Internal.Fold Control.Lens.Internal.Getter
    Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
    Control.Lens.Internal.Iso Control.Lens.Internal.Level
    Control.Lens.Internal.List Control.Lens.Internal.Magma
    Control.Lens.Internal.Prism Control.Lens.Internal.Review
    Control.Lens.Internal.Setter Control.Lens.Internal.TH
    Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
    Control.Lens.Level Control.Lens.Operators Control.Lens.Plated
    Control.Lens.Prism Control.Lens.Reified Control.Lens.Review
    Control.Lens.Setter Control.Lens.TH Control.Lens.Traversal
    Control.Lens.Tuple Control.Lens.Type Control.Lens.Wrapped
    Control.Lens.Zoom Control.Monad.Error.Lens
    Control.Parallel.Strategies.Lens Control.Seq.Lens Data.Array.Lens
    Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
    Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lens
    Data.Text.Strict.Lens Data.Text.Lazy.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Lens Data.Vector.Generic.Lens
    GHC.Generics.Lens System.Exit.Lens System.FilePath.Lens
    System.IO.Error.Lens Language.Haskell.TH.Lens Numeric.Lens
hidden-modules: Paths_lens
abi: 13935742242b291cb34cc2b6ee8ba00b
trusted: False
import-dirs: /home/yggdralisk/Desktop/100DaysOfCode/Haskell/MangaScrapper/.cabal-sandbox/lib/x86_64-linux-ghc-8.0.2/lens-4.15.4-2eY2tJufEmsKXrzkagOzf6
library-dirs: /home/yggdralisk/Desktop/100DaysOfCode/Haskell/MangaScrapper/.cabal-sandbox/lib/x86_64-linux-ghc-8.0.2/lens-4.15.4-2eY2tJufEmsKXrzkagOzf6
dynamic-library-dirs: /home/yggdralisk/Desktop/100DaysOfCode/Haskell/MangaScrapper/.cabal-sandbox/lib/x86_64-linux-ghc-8.0.2
data-dir: /home/yggdralisk/Desktop/100DaysOfCode/Haskell/MangaScrapper/.cabal-sandbox/share/x86_64-linux-ghc-8.0.2/lens-4.15.4
hs-libraries: HSlens-4.15.4-K5DiWacY4288B1TOQZ5ZDi
depends:
    array-0.5.1.1 base-4.9.1.0 base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
    bifunctors-5.5-32pcfa06LpVCOUG1IJODTZ bytestring-0.10.8.1
    call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
    comonad-5.0.2-H52WoFy1psL4ezOZjQhzcb containers-0.5.7.1
    contravariant-1.4-2ZEIQcIYz4Q4N5hzlLOWcg
    distributive-0.5.3-EuIpsHoIr4FDrtYfl5sBVO
    exceptions-0.8.3-74UMKX8an841ULC0nHtYN7 filepath-1.4.1.1
    free-4.12.4-LT9pA6TTnrlFJq6FCOmUdE ghc-prim-0.5.0.0
    hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
    kan-extensions-5.0.2-EMVo0fwCEKQ9S24oDfaP4a
    mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
    parallel-3.2.1.1-KQJHWCcq2Ka569Stb10nhx
    profunctors-5.2.1-BhE2Syyu6IjGszIb6znvrY
    reflection-2.1.2-1Oix9U9tVVU4sCEhxeh8Kr
    semigroupoids-5.2.1-IatuoOlUAQiJGOq66vwsAu
    semigroups-0.18.3-IxQNmCA7qrSEQNkoHSF7A
    tagged-0.8.5-jDBtbBndklGIlXZjVMhpH template-haskell-2.11.1.0
    text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
    th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ transformers-0.5.2.0
    transformers-compat-0.5.1.4-84sV5mkFftgD9qwogvuEDr
    unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
    vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG
    void-0.7.2-2kaNlnbmZo5LCwbtPDXIQb
haddock-interfaces: /home/yggdralisk/Desktop/100DaysOfCode/Haskell/MangaScrapper/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.0.2/lens-4.15.4/html/lens.haddock
haddock-html: /home/yggdralisk/Desktop/100DaysOfCode/Haskell/MangaScrapper/.cabal-sandbox/share/doc/x86_64-linux-ghc-8.0.2/lens-4.15.4/html
